{"version":3,"sources":["HighLowGame.js","index.js"],"names":["HighLowGame","props","state","newRand","Math","floor","random","time","startMessage","resultMessage","guessResult","interval","userGuess","guessCount","winCount","loseCount","tick","bind","handleForm","currentGame","updateInput","clearInput","reset","this","setState","clearInterval","console","log","e","target","value","refs","guess_field","focus","preventDefault","newGuess","setInterval","newProps","newState","currentProps","currentState","className","onSubmit","type","onChange","onFocus","currentTarget","select","placeholder","ref","Component","destination","document","querySelector","ReactDOM","render"],"mappings":"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","file":"static/js/main.b7c22b53.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass HighLowGame extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      newRand: Math.floor(Math.random() * 999) + 1,\r\n      time: 60,\r\n      startMessage: \"Enter a number to begin:\",\r\n      resultMessage: \"---\",\r\n      guessResult: \"---\",\r\n      interval: 0,\r\n      userGuess: \"\",\r\n      guessCount: 0,\r\n      winCount: 0,\r\n      loseCount: 0\r\n    };\r\n\r\n    this.tick = this.tick.bind(this);\r\n    this.handleForm = this.handleForm.bind(this);\r\n    this.currentGame = this.currentGame.bind(this);\r\n    this.updateInput = this.updateInput.bind(this);\r\n    this.clearInput = this.clearInput.bind(this);\r\n    this.reset = this.reset.bind(this);\r\n  }\r\n\r\n  // Reset state for new game:\r\n  reset() {\r\n    this.setState({\r\n      newRand: Math.floor(Math.random() * 999),\r\n      // message: \"Enter a new number to start the game.\",\r\n      // guessResult: \"High or low?\",\r\n      guessCount: 0,\r\n      time: 60,\r\n      userGuess:\"\"\r\n    });\r\n    clearInterval(this.interval);\r\n    console.log(\"New Random Number: \" + this.state.newRand);\r\n  };\r\n\r\n  // Assign entered value to userGuess:\r\n  updateInput(e){\r\n    this.setState({\r\n      userGuess: e.target.value\r\n    });\r\n  }\r\n\r\n  // Clear input in guess field:\r\n  clearInput(){\r\n    this.setState({\r\n      userGuess:\"\"\r\n    });\r\n    this.refs.guess_field.focus(); // Keep focus in the guess box.\r\n  }\r\n\r\n  // Define behavior to prevent DOM from refreshing:\r\n  handleForm(e) {\r\n      e.preventDefault();\r\n      this.currentGame(e);\r\n      console.log(\"Prevented default.\");\r\n    };\r\n\r\n  // Timer tick:\r\n  tick() {\r\n    // if (this.state.time > 0) {\r\n      this.setState({\r\n        time: this.state.time - 1,\r\n      });\r\n    // }\r\n    if (this.state.time === 0) {\r\n      this.currentGame();\r\n    }\r\n  }\r\n\r\n  // ================================== //\r\n  currentGame() {\r\n    var newGuess = this.state.userGuess;\r\n\r\n    // Timer start:\r\n    if (this.state.time === 60) {\r\n        this.interval = setInterval(\r\n          () => this.tick(),\r\n          1000\r\n        );\r\n    }\r\n    // Add 1 to loseCount if timer reaches 0:\r\n    if (this.state.time === 0) {\r\n        this.setState({\r\n          loseCount: this.state.loseCount + 1,\r\n          startMessage: \"Enter a new number to reset and start a new game.\",\r\n          guessResult: \"You lose!\",\r\n          resultMessage: \"Time's up! The random number was \" + this.state.newRand + \".\"\r\n        });\r\n        this.reset();\r\n        // Check user's guess input:\r\n      } else if (newGuess > this.state.newRand) {\r\n        this.setState({\r\n            guessResult: newGuess + \" is too high!\",\r\n            guessCount: this.state.guessCount + 1,\r\n            resultMessage: this.state.resultMessage = \"Keep guessing!\"\r\n        });\r\n    } else if (newGuess < this.state.newRand) {\r\n        this.setState({\r\n            guessResult: newGuess + \" is too low!\",\r\n            guessCount: this.state.guessCount + 1,\r\n            resultMessage: this.state.resultMessage = \"Keep guessing!\"\r\n        });\r\n    } else {\r\n        this.setState({\r\n            guessResult: \"You got it!\",\r\n            resultMessage: \"The random number is \" + this.state.newRand + \".\",\r\n            winCount: this.state.winCount + 1\r\n        });\r\n        this.reset();\r\n    }\r\n\r\n    this.clearInput();\r\n  } // End currentGame\r\n\r\n\r\n  // ================================== //\r\n  componentDidMount() {\r\n    this.refs.guess_field.focus();\r\n    console.log(\"Component Mounted.\");\r\n    console.log(\"Random Number: \" + this.state.newRand);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    console.log(\"Component Will Unmount.\");\r\n  }\r\n\r\n  shouldComponentUpdate (newProps, newState) {\r\n    console.log (\"Should Component Update?\");\r\n    return true;\r\n  }\r\n\r\n  componentDidUpdate (currentProps, currentState) {\r\n    console.log(\"Component Did Update.\");\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1 className=\"title\">High Low Game</h1>\r\n        <h3>Guess the random number between 0 and 999.</h3>\r\n        <ul>\r\n        <li>You have 60 seconds to guess the correct number.</li>\r\n        <li>The game will let you know if your guess is higher or lower than the secret random number.</li>\r\n        <li>The 60 second timer will begin when you enter your first guess.</li>\r\n        </ul>\r\n        <form onSubmit={this.handleForm}>\r\n            <p className=\"startMessage\">{this.state.startMessage}</p>\r\n            <input className=\"guess-field\"\r\n                   type=\"number\"\r\n                   value={this.state.userGuess}\r\n                   onChange={this.updateInput}\r\n                   onFocus={e=>e.currentTarget.select()}\r\n                   placeholder=\"Enter guess\"\r\n                   ref=\"guess_field\">\r\n            </input>\r\n            <button type=\"submit\">Guess!</button>\r\n        </form>\r\n        <p className=\"message\">{this.state.guessResult} <br /> {this.state.resultMessage}</p>\r\n        <p>Time Remaining: <br /><span className=\"timer\">{this.state.time}</span></p>\r\n        <form className=\"info\">\r\n          <p>Guesses taken: <br /><span className=\"count\">{this.state.guessCount}</span></p>\r\n          <p>Games Won: <br /><span className=\"count\">{this.state.winCount}</span></p>\r\n          <p>Games Lost: <br /><span className=\"count\">{this.state.loseCount}</span></p>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HighLowGame;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport HighLowGame from './HighLowGame';\nimport './main.css';\n\nvar destination=document.querySelector(\"#container\")\n\nReactDOM.render(\n  <div>\n    <HighLowGame/>\n  </div>,\n  destination\n);\n"],"sourceRoot":""}